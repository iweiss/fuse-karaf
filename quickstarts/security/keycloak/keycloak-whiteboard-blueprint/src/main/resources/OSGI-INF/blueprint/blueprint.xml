<?xml version="1.0" encoding="UTF-8"?>
<!--

     Copyright 2005-2018 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!--
        We need a reference to org.ops4j.pax.web.service.WebContainer, so we can create/obtain a desired
        instance of org.osgi.service.http.HttpContext
    -->
    <reference id="webContainer" interface="org.ops4j.pax.web.service.WebContainer" />

    <!--
        This bean will create org.osgi.service.http.HttpContext and immediately will use it to
        register org.ops4j.pax.web.service.whiteboard.HttpContextMapping which is needed to configure
        servlet context parameters and context path.
    -->
    <bean id="httpContextConfigurer" class="org.jboss.fuse.quickstarts.security.keycloak.wb.AppConfiguration"
            init-method="configure">
        <property name="webContainer" ref="webContainer" />
        <property name="bundleContext" ref="blueprintBundleContext" />
        <property name="contextMapping">
            <bean class="org.jboss.fuse.quickstarts.security.keycloak.wb.App4HttpContextMapping">
                <argument value="app4" /> <!-- context id -->
                <argument value="app4" /> <!-- context path -->
            </bean>
        </property>
    </bean>

    <!--
        define servlets - they should be created (and registered) *after* registering login config by
        PaxWebIntegrationService - that's why depends-on is used
    -->

    <bean id="infoServlet" class="org.jboss.fuse.quickstarts.security.keycloak.wb.servlets.InfoServlet"
        depends-on="keycloakPaxWebIntegration" />
    <bean id="logoutServlet" class="org.jboss.fuse.quickstarts.security.keycloak.wb.servlets.LogoutServlet"
        depends-on="keycloakPaxWebIntegration" />

    <!--
        publish javax.servlet.Servlet services to be picked up by pax-web-extender-whiteboard
        pax-web-extender-whiteboard uses service registration properties
    -->

    <service ref="infoServlet" interface="javax.servlet.Servlet">
        <service-properties>
            <entry key="httpContext.id" value="app4" />
            <entry key="osgi.http.whiteboard.servlet.name" value="info-servlet" />
            <entry key="osgi.http.whiteboard.servlet.pattern"> <!-- or "urlPatterns" -->
                <array value-type="java.lang.String">
                    <value>/info</value>
                </array>
            </entry>
        </service-properties>
    </service>
    <service ref="logoutServlet" interface="javax.servlet.Servlet">
        <service-properties>
            <entry key="httpContext.id" value="app4" />
            <entry key="osgi.http.whiteboard.servlet.name" value="logout-servlet" />
            <entry key="osgi.http.whiteboard.servlet.pattern"> <!-- or "urlPatterns" -->
                <array value-type="java.lang.String">
                    <value>/logout</value>
                </array>
            </entry>
        </service-properties>
    </service>

    <!--
        org.keycloak.adapters.osgi.undertow.PaxWebIntegrationService automatically registers
        login configuration, as in web.xml:

            <login-config>
                <auth-method>KEYCLOAK</auth-method>
                <realm-name>_does_not_matter</realm-name>
            </login-config>

        and security constrants, as in web.xml:

            <security-constraint>
                <web-resource-collection>
                    <web-resource-name>secured</web-resource-name>
                    <url-pattern>/info</url-pattern>
                </web-resource-collection>
                <auth-constraint>
                    <role-name>admin</role-name>
                </auth-constraint>
            </security-constraint>

            <security-role>
                <role-name>admin</role-name>
            </security-role>

        It's a declarative way to call (respectively):
         - org.ops4j.pax.web.service.WebContainer.registerLoginConfig("KEYCLOAK", ...)
         - org.ops4j.pax.web.service.WebContainer.registerConstraintMapping(...)
    -->

    <bean id="keycloakPaxWebIntegration" class="org.keycloak.adapters.osgi.undertow.PaxWebIntegrationService"
            init-method="start" destroy-method="stop">
        <!--
            "blueprintBundleContext" reference is always available in blueprint.xml
            see "121.11.1 Environment Managers" in OSGi R6 Enterprise
        -->
        <property name="bundleContext" ref="blueprintBundleContext" />
        <property name="constraintMappings">
            <list>
                <bean class="org.keycloak.adapters.osgi.PaxWebSecurityConstraintMapping">
                    <property name="url" value="/info/*" />
                    <property name="authentication" value="true" /> <!-- true is default -->
                    <property name="roles">
                        <list>
                            <value>admin</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
        <!--
            If we don't set httpContext property, PaxWebIntegrationService will create its own, with "default" id
            however we can set it to an instance we've already created in httpContextConfigurer.configure()
            (and registered as OSGi service)
        -->
        <property name="httpContext">
            <bean factory-ref="httpContextConfigurer" factory-method="getHttpContext" />
        </property>
    </bean>

</blueprint>
